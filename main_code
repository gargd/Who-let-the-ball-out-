#include <iostream>
#include <stdlib.h>

#ifdef __APPLE__
#include <OpenGL/OpenGL.h>
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include "imageloader.h"
#include "vec3f.h"
using namespace std;

GLdouble mouseX = 0, mouseY = 0;
int score = 0;
int ptime, ltime;

typedef struct particle
{
	float position[3];
	float velocity[3];
}particle;

struct pos
{
	float x, y;
};

pos start, finish;
particle ball;

void handleKeypress(unsigned char key, int x, int y) {
	switch (key) {
	case 27: 
		exit(0);
		break;
	case 'j':
		mouseX -= 0.25f;
		glutPostRedisplay();
		break;
	case 'l':
		mouseX += 0.25f;
		glutPostRedisplay();
		break;
	case 'i':
		mouseY += 0.25f;
		glutPostRedisplay();
		break;
	case 'k':
		mouseY -= 0.25f;
		glutPostRedisplay();
		break;



	}
}


void idleFunc()
{
	int i;
	float dt;

	ptime = glutGet(GLUT_ELAPSED_TIME);
	dt = (0.001)*(ptime - ltime);
	
	for (i = 0; i < 3; i++)
	{
		ball.position[i] += dt*(ball.velocity[i]);
		if (ball.position[0] >= 4.5f||ball.position[0]<=-4.5f)
		{
			ball.velocity[0] = -ball.velocity[0];
			
		}
		if (ball.position[1] >=3.5f|| ball.position[1] <=-3.5f )
		{
			ball.velocity[1] = -ball.velocity[1];
		}
		if (ball.position[2] <= -15.5f)
		{
			ball.velocity[2] = -ball.velocity[2];

		}

		if (ball.position[2] >= 2.5f )
		{

			cout << "\nReached the edge\n";
			if (ball.position[0] <= (mouseX + 0.7f) && ball.position[0] >= (mouseX - 0.7f) && ball.position[1] <= (mouseY + 0.7f) && ball.position[1] >= (mouseY - 0.7f))
			{
				ball.velocity[2] = -ball.velocity[2];
				score++;
			}
			else
			{
				cout << "\nGame Over!!\n";
				cout << "Score: " << score/3 << "\n";
				for (i = 0; i < 3; i++)
				ball.velocity[i] = 0;

			}
		}

	}

	ltime = ptime;

	glutPostRedisplay();


}


/*void GetMousePos3D(int button,int state,int x, int y)
{
	GLint viewport[4];
	GLdouble modelview[16];
	GLdouble projection[16];

	GLfloat winX, winY, winZ;
	GLdouble posX, posY, posZ; 
	
	glGetDoublev(GL_MODELVIEW_MATRIX, modelview);
	glGetDoublev(GL_PROJECTION_MATRIX, projection);
	glGetIntegerv(GL_VIEWPORT, viewport);

	winX = (float)x;
	winY = (float)viewport[3] - (float)y;
	glReadPixels(x, int(winY), 1, 1, GL_DEPTH_COMPONENT, GL_FLOAT, &winZ);

	gluUnProject(winX, winY, winZ, modelview, projection, viewport, &posX, &posY, &posZ);

	cout << "mouse pos:"<<posX << "\t" << posY << "\t" << posZ << "\n";

	mouseX = posX;
	mouseY = posY;
	glutPostRedisplay();

	//return Vec3f(posX, posY, posZ);

}
*/


GLuint loadTexture(Image* image) {
	GLuint textureId;
	glGenTextures(1, &textureId); 
	glBindTexture(GL_TEXTURE_2D, textureId); 
	
	glTexImage2D(GL_TEXTURE_2D,                
		0,                            
		GL_RGB,                       
		image->width, image->height,  
		0,                            
		GL_RGB, 
		GL_UNSIGNED_BYTE, 
		
		image->pixels);              
	return textureId; 
}

GLuint _textureId1, _textureId2, _textureId3, _textureId4; 

void initRendering() {
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_LIGHTING);
	glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glEnable(GL_BLEND);

	Image* image1 = loadBMP("back.bmp");
	_textureId1= loadTexture(image1);

	Image* image2 = loadBMP("sides.bmp");
	_textureId2 = loadTexture(image2);

	Image* image3 = loadBMP("bottom.bmp");
	_textureId3 = loadTexture(image3);

	Image* image4 = loadBMP("ceiling.bmp");
	_textureId4 = loadTexture(image4);
	
	delete image1,image2,image3,image4;

	int i;
	for (i = 0; i < 3; i++)
	{
		
		ball.velocity[i] = 1.0f;
	}

	ball.position[0] = 2.0*((float)rand() / RAND_MAX) - 1.0;
	ball.position[1] = -4.0*((float)rand() / RAND_MAX) +1.0;
	ball.position[2] = -15.5;

	
}

void handleResize(int w, int h) {
	glViewport(0, 0, w, h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0, (float)w / (float)h, 1.0, 1000.0);
}


GLfloat x = 1.0f, y = 1.0f;


void drawScene() {

	gluLookAt(0.0f,1.0f,5.7f,0.0f,1.0f,0.0f,0.0f,1.0f,0.0f);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glTranslatef(0.0f, 1.0f, -6.0f);

	GLfloat ambientLight[] = { 1.2f, 1.2f,0.2f, 1.0f };
	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientLight);

	GLfloat directedLight[] = { 0.7f, 0.7f, 0.7f, 1.0f };
	GLfloat directedLightPos[] = { -10.0f, 15.0f, 20.0f, 0.0f };
	glLightfv(GL_LIGHT0, GL_DIFFUSE, directedLight);
	glLightfv(GL_LIGHT0, GL_POSITION, directedLightPos);

	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, _textureId3);

	//Bottom
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glColor3f(1.0, 1.0, 1.0);
	
	glBegin(GL_QUADS);

	glNormal3f(0.0, 1.0f, 0.0f);
	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(-4.5f, -3.5f, 2.5f);
	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(4.5f, -3.5f, 2.5f);
	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(4.5f, -3.5f, -15.5f);
	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(-4.5f, -3.5f, -15.5f);

	glEnd();

	glBindTexture(GL_TEXTURE_2D, _textureId4);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	glBegin(GL_QUADS);

	glNormal3f(0.0, 1.0f, 0.0f);
	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(-4.5f, 3.5f, 2.5f);
	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(4.5f, 3.5f, 2.5f);
	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(4.5f, 3.5f, -15.5f);
	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(-4.5f, 3.5f, -15.5f);

	glEnd();

	glBindTexture(GL_TEXTURE_2D, _textureId1);
	//Back
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glColor3f(1.0f, 1.0f, 1.0f);
	glBegin(GL_QUADS);

	glNormal3f(0.0f, 0.0f, 1.0f);
	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(-4.5f, -3.5f, -15.5f);
	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(-4.5f,3.5f,-15.5f);
	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(4.5f, 3.5f, -15.5f);
	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(4.5f, -3.5f, -15.5f);

	glEnd();

	//Left
	glBindTexture(GL_TEXTURE_2D, _textureId2);

	
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	
	//glColor3f(1.0f, 0.7f, 0.3f);
	glBegin(GL_QUADS);

	glNormal3f(1.0f, 0.0f, 0.0f);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-4.5f, -3.5f, 2.5f);
	glTexCoord2f(1.0, 0.0);
	glVertex3f(-4.5f, -3.5f, -15.5f);
	glTexCoord2f(1.0, 1.0);
	glVertex3f(-4.5f, 3.5f, -15.5f);
	glTexCoord2f(0.0, 1.0);
	glVertex3f(-4.5f, 3.5f, 2.5f);

	glEnd();

	glBegin(GL_QUADS);

	glNormal3f(1.0f, 0.0f, 0.0f);
	glTexCoord2f(0.0, 0.0);
	glVertex3f(4.5f, -3.5f, 2.5f);
	glTexCoord2f(1.0, 0.0);
	glVertex3f(4.5f, -3.5f, -15.5f);
	glTexCoord2f(1.0, 1.0);
	glVertex3f(4.5f, 3.5f, -15.5f);
	glTexCoord2f(0.0, 1.0);
	glVertex3f(4.5f, 3.5f, 2.5f);

	glEnd();


	//drawRec();

	glPushMatrix();
	glColor3f(1.0,0.0,0.0);
	glTranslatef(ball.position[0],ball.position[1],ball.position[2]);
	
	glutSolidSphere(0.1, 200, 20);
	glPopMatrix();

	glPushMatrix();
	glColor3f(0.0f,0.0f,0.0f);
	glBegin(GL_LINES);
	//cout << "starting lines\n";
	glVertex3f(-4.5f,3.5f,ball.position[2]);
	glVertex3f(4.5f, 3.5f, ball.position[2]);
	glVertex3f(4.5f, 3.5f, ball.position[2]);
	glVertex3f(4.5f, -3.5f, ball.position[2]);
	glVertex3f(4.5f, -3.5f, ball.position[2]);
	glVertex3f(-4.5f, -3.5f, ball.position[2]);
	glVertex3f(-4.5f, -3.5f, ball.position[2]);
	glVertex3f(-4.5f, 3.5f, ball.position[2]);

	glVertex3f(-4.4f,ball.position[1],2.5f);
	glVertex3f(-4.4f, ball.position[1], -15.5f);

	glVertex3f(-4.5f, ball.position[1], -15.4f);
	glVertex3f(4.5f, ball.position[1], -15.4f);

	glVertex3f(4.4f, ball.position[1], 2.5f);
	glVertex3f(4.4f, ball.position[1], -15.5f);


	glEnd();
	glPopMatrix();

	
	glPushMatrix();
	glColor4f(0, 0, 0,0.5);
	glBegin(GL_QUADS);
	glVertex3f(mouseX + 0.7f, mouseY + 0.7f,2.5f);
	glVertex3f(mouseX - 0.7f, mouseY + 0.7f,2.5f);
	glVertex3f(mouseX - 0.7f, mouseY - 0.7f,2.5f);
	glVertex3f(mouseX + 0.7f, mouseY - 0.7f,2.5f);
	glEnd();

	glPopMatrix();
	
	glutSwapBuffers();
}


void update(int value)
{
	int i;
	
	for (i = 0; i < 3; i++)
		ball.velocity[i] += 0.1f;
	//cout << x << "\t" << y << "\n";
	glutPostRedisplay();
	glutTimerFunc(10000, update, 1);
}


int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
	glutInitWindowSize(900, 700);
	glutInitWindowPosition(300, 0);

	glutCreateWindow("Game 1.0");
	initRendering();

	glutDisplayFunc(drawScene);
	glutKeyboardFunc(handleKeypress);
	glutReshapeFunc(handleResize);
	//glutMouseFunc(GetMousePos3D);
	glutIdleFunc(idleFunc);
	glutTimerFunc(5000, update, 1);

	glutMainLoop();
	return 0;
}
